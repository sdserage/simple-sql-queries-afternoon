Table - People

1. Create a table called Person that records a person's ID, Name, Age, Height ( in cm ), City, FavoriteColor.
    * ID should be an auto-incrementing id/primary key - Use type: INTEGER PRIMARY KEY AUTOINCREMENT
    - CREATE TABLE Person (
                            ID INTEGER PRIMARY KEY AUTOINCREMENT,
                            Name NVARCHAR(120),
                            Age INTEGER,
                            Height INTEGER,
                            City NVARCHAR(40),
                            FavoriteColor NVARCHAR(30)
                          );
2. Add 5 different people into the Person database.
    * Remember to not include the ID because it should auto-increment.
    - INSERT INTO Person (Name, Age, Height, City, FavoriteColor)
	     VALUES
       ("Scott", 27, 177, "Provo", "Green"),
       ("Christian", 23, 177, "St. George", "Blue"),
       ("Bob", 39, 186, "New York", "Red"),
       ("May", 18, 168, "Ephraim", "Blue"),
       ("Joe", 55, 162, "Salt Lake City", "Pink");
    - SELECT * FROM Person;
      Gives us:
        ID  Name	      Age  Height   City	          FavoriteColor
        1   Scott       27   177      Provo           Green
        2   Christian   23	 177	    St. George	    Blue
        3   Bob         39	 186	    New York	      Red
        4   May         18	 168	    Ephraim	        Blue
        5   Joe         55	 162	    Salt Lake City	Pink
3. List all the people in the Person table by Height from tallest to shortest.
    - SELECT Name, Height FROM Person ORDER BY Height DESC;
    - Gives us:
        Bob	186
        Scott	177
        Christian	177
        May	168
        Joe	162
4. List all the people in the Person table by Height from shortest to tallest.
    - SELECT Name, Height FROM Person ORDER BY Height;
    - Gives us:
        Joe	162
        May	168
        Scott	177
        Christian	177
        Bob	186
5. List all the people in the Person table by Age from oldest to youngest.
    - SELECT Name, Age FROM Person ORDER BY Age DESC;
6. List all the people in the Person table older than age 20.
    - SELECT Name, Age FROM Person WHERE Age > 20;
7. List all the people in the Person table that are exactly 18.
    - SELECT * FROM Person WHERE Age = 18;
8. List all the people in the Person table that are less than 20 and older than 30.
    - SELECT * FROM Person WHERE Age < 20 AND Age > 30; // Literal, gives us nothing
    - SELECT * FROM Person WHERE Age < 20 OR Age > 30; // Probably what they actually wanted, gives us both people less than twenty as well as peopl older than 30
9. List all the people in the Person table that are not 27 (Use not equals).
    - SELECT * FROM Person WHERE Age != 27;
    - SELECT * FROM Person WHERE Age <> 27; // Also works
10. List all the people in the Person table where their favorite color is not red.
    - SELECT * FROM Person WHERE FavoriteColor <> 'Red';
11. List all the people in the Person table where their favorite color is not red and is not blue.
    - SELECT * FROM Person WHERE FavoriteColor <> 'Red' AND FavoriteColor != 'Blue';
12. List all the people in the Person table where their favorite color is orange or green.
    - SELECT * FROM Person WHERE FavoriteColor = 'Green' OR FavoriteColor = 'Orange';
13. List all the people in the Person table where their favorite color is orange, green or blue (use IN).
    - SELECT * FROM Person WHERE FavoriteColor IN('Orange','Green','Blue');
14. List all the people in the Person table where their favorite color is yellow or purple (use IN).
    - SELECT * FROM Person WHERE FavoriteColor IN('Yellow','Purple');

Table-Order

1. Create a table called Orders that records: PersonID, ProductName, ProductPrice, Quantity.
    * PersonID should be different for different people.
    * Make orders for at least two different people.
    - CREATE TABLE Orders(
	                          PersonID INTEGER,
	                          ProductName NVARCHAR(30),
  	                        ProductPrice INTEGER,
  	                        Quantity INTEGER
                         );
    - INSERT INTO Orders (PersonID, ProductName, ProductPrice, Quantity)
      VALUES
      (17, "STuF", 1000, 2),
      (18, "Book of Things", 1589, 1);
2. Add 5 Orders to Order table.
    - INSERT INTO Orders (PersonID, ProductName, ProductPrice, Quantity)
      VALUES
      (17, "MorSTuF", 1100, 5),
      (18, "Book of More Things", 1899, 1),
      (16, "An actual cat", 4000, 1),
      (17, "MorSTuF", 1100, 2),
      (16, "Doughnut", 130, 12);
3. Select all the records from the Order table.
    - SELECT * FROM Orders;
4. Calculate the total number of products ordered.
    - SELECT COUNT(*) FROM Orders;
5. Calculate the total order price.
    - SELECT SUM(ProductPrice) FROM Orders;
6. Calculate the total order price by a single PersonID.
    - SELECT SUM(ProductPrice) FROM Orders WHERE PersonID = 17;

Table-Artists

1. Add 3 new Artists to the Artist table. ( It's already created )
    - INSERT INTO Artist (Name)
      VALUES
      ("Pizza Mike"),
      ("Lil' Pizza"),
      ("Gary Garyson");
2. Select 10 artists in reverse alphabetical order.
    - SELECT * FROM Artist ORDER BY Name DESC LIMIT(10);
3. Select 5 artists in alphabetical order.
    - SELECT * FROM Artist ORDER BY Name LIMIT(5);
4. Select all artists that start with the word "Black".
    - SELECT * FROM Artist WHERE SUBSTR(Name, 1, 5) = "Black";
5. Select all artists that contain the word "Black".
    - SELECT * FROM Artist WHERE Name LIKE "%Black%";

Table - Employee

1. List all Employee first and last names only that live in Calgary.
    - SELECT FirstName, LastName FROM Employee WHERE City = "Calgary";
2. Find the first and last name and birthdate for the youngest employee.
    - SELECT FirstName, LastName, BirthDate FROM Employee ORDER BY BirthDate DESC LIMIT(1);
3. Find the first and last name and birthdate for the oldest employee.
    - SELECT FirstName, LastName, BirthDate FROM Employee ORDER BY BirthDate LIMIT(1);
4. Find everyone that reports to Nancy Edwards (Use the ReportsTo column).
    - SELECT * FROM Employee WHERE ReportsTo =
      (SELECT EmployeeId FROM Employee WHERE FirstName = "Nancy" AND LastName = "Edwards");
5. Count how many people live in Lethbridge.
    - SELECT COUNT(*) FROM Employee WHERE City = "Lethbridge";

Table - Invoice

1. Count how many orders were made from the USA.
    - SELECT COUNT(*) FROM Invoice WHERE BillingCountry = "USA";
2. Find the largest order total amount.
    - SELECT Total FROM Invoice ORDER BY Total DESC LIMIT(1);
3. Find the smallest order total amount.
    - SELECT Total FROM Invoice ORDER BY Total LIMIT(1);
4. Find all orders bigger than $5.
    - SELECT * FROM Invoice WHERE Total > 5;
5. Count how many orders were smaller than $5.
    - SELECT COUNT(*) FROM Invoice WHERE Total < 5;
6. Count how many orders were in CA, TX, or AZ (use IN).
    - SELECT COUNT(*) FROM Invoice WHERE BillingState IN("CA", "TX", "AZ");
7. Get the average total of the orders.
    - SELECT AVG(Total) FROM Invoice;
8. Get the total sum of the orders.
    - SELECT SUM(Total) FROM Invoice;
